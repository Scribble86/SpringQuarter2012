<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQ0MAAAEACAAYGQAAFgAAACgAAABDAAAAhgAAAAEACAAAAAAA8BQAABMLAAATCwAAAAEAAAAA
        AAATXGgAHFehAFJaXwBm0foAit/4AK6vswD9/f4AKHTSADaJ2wDQ0dMATrT3AE9lkAAxk+sAZbDrAI2O
        jwBMjqEAo6tVAEGU3wC6usgAAAFuAAQEAwARUb8AAQJPAOPk5gAvMDAAAAEwAAwsLwCGucYAHmjOAA9s
        9QAHIG4ACzCNAE6f5QATLk8ADT6tAFWrzABruc4AJjlVAGpuMwBZPJUAOT6QAJ6kxAAKU+IAgMHuACR6
        5QApPm0APyVZAApFRACw8fsACBcZABxexAAknvwAydVrACWFvADz8/MAXJTEABYWmgAbGxkAZ0a/AJuZ
        sQAQFjcAbnJ1AKGhoQBARUUA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        HyIfJRoZISIoIhUVFTIyAQEyMhwyMhUVFRwxJSAlFAlAQEBAQAAHBxwcHAcHBwcICAgICCEUMSEeHh4e
        Hh4eHx4fHyIBIRQhFSIiIhUyHBwcHAcyAQcHBxwsBwccBzUUCzcxAkBAQEBAAAcHBxwcHAcHCAgICAgI
        CxQlIh4eHh4eHh4eHx8fHzkUASIiIhUyMhwHBwcHBwwIBwgHCAcIDAgHCj8LIzE5QEBAQEAABxwcHBwH
        BwcICAgICAgHJTEtHh8fHh4eHx8fIgEYLR8VFTIyHAcHBwgICAgICAgICAgICAgAACAgIzcjMTlAQEBA
        QAAHHBwcHBwHBwgICAgICAg1FDwfHh4eHx4fIh8BOS0dMhwcHAcHBwgICAgIERERERERCBERIAsLDSAN
        CiQ5GEBAQEBAAAccHBwcHAcHCAgRCAgICAgaHh8fHx8fHx8hKi0UARwcBwcHCAgICAgIEQgIEREIERER
        ERERDQ0gIA0rJDE/QEBAQEAABxwcHBwHBwcICBERCAgICAAhIh8fLR8fATwlMSUHBwcHBwgICAgRERER
        EREREREgICAgESAgIA0NKyMYFBgXF0BAQAAHHBwcBwcICBERERERCAgIBy0fHx8fHx8iMhQhDAgICAgI
        ESARERERERERESAgIA0NDQ0NDQ0rKyswAhQUFBQCNkBAAAccBwcHCAgIEREIERERCAgIJS0fHx8iIiIc
        FD8gCAgICBERICAgICAgIBEgIA0NDQ0NDQ0rKysrBDA9FBQUFBQOQEAANQwHBwgICBERERERCAgICAwh
        IR8fHyIVMhwAOQ8gCBERESANDQ0NDSAgICANDSsrDSsrKysrKysEMD8UFD85FA5AQAAxNSwICAgRERER
        EREREREIDCUxHx8fIjIcBwgULSARESAgIA0rKysrDQ0NDQ0rKwQrKysrKysrKxsCFBQxEhQ/F0BAABgU
        DAgICAgREREREREREREIARQhHyIBMgcIERoaNRERESARDSsrKysrKysNKysrMDAEBAQrKwQEORQUFDk9
        MRIGQEAAFwICNREgERERERERERERCAgyPDwfIjIHBwgRIBEgEREgICAgDSsrKysbNysEBD0/PhIbGykb
        DyECPwI/Aj8OBkBAQABAQAIUPyAREREREREREREICAcsGRUVBwcICBERESANDQ0NDQ0NDSsEMAIUAgkw
        CT05FBQ5FBQ/DkBAQEBANkBAQEBAAEBAQA4UPQQgICAgERERERERCAwhASwHCAgREQoNAwQEMAQEBAQE
        BDAwAhQUOT8CAjEUFD8OEjYGQEBAQEBAQEBAQEAAQEBABgU+AgARICARIBEREREREREaIyAIEQgLJSUl
        Pz8/Pz8/PyU/PxgUFA4JPQ4FCQkFFwZAQEBAQEBAQEBAQEBAQABAQEBAQEBAMSsgICAgICAREREgIBQY
        IyARCDEUGDkUFBQOAhQUFBgCBTY2BkAGBgZAQEBAQEBAQEBAQEBAQEBAQEBAADExQEBAQEA/Ag0gICAg
        ICAgICARDxQLChEgFD02AhQUFD4XORQ5NgZAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAHBwBGjEU
        FEAUGCsNDQ0NDSANDQ0NNwA1DCM5CQYCOTEUPwYCFBQXQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBA
        QAAyHAcHBwEhFBQUAisNDQ0NDQ0NDSANAyAIDRQCCQU/GBQYNgkOGBJAQEBAQEBAQEBAQEBAQEBAQEBA
        QEBAQEBAQEBAABwcHAcsDCALGBQUDw0NDQ0NDQ0NDSAREQgKFBQxPQkXFAIGBgY/BUBAQEBAQEBAQEBA
        QEBAQEBAQEBAQEBAQEBAQEAABwcHBwcIESA3Dw8CKw0NDQ0NDQ0NDSARESAvFC8APz8aGD8/PxQ/PwVA
        QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAICAgICAgIESAgAz8PAw0NDQ0NDQ0gIBERESM5MSUUFAMk
        ABQUFDkFNkBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAABERCAgICAgRERENCzEPDQ0NDQ0NDSARCgsx
        DTcxMTE5LQslMTE9CUBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAEREIEREREREREQgDDxQkDQ0N
        DSAgIBERDQ85JAMNDQMPCw8PPxdAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAREREREREREREg
        ESANAhgkAysNICAgDQ0gDRQ5Dw0NDQQkCzExEkBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAA0N
        DSsNDQ0NDQ0NDQ0EORoCAg0DDSM3LQ8NDxQUDysNCxQUFAlAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBA
        QEBAQEAALSEAGAsLJQsCDwsLAgs5FBQ9BSU/AhoLJA0rNzcjKw0kOxIXQEBAQEBAQEBAQEBAQEBAQEBA
        QEBAQEBAQEBAQEBAQAAYDg4OAj89GDkxOTkCPz0SFwYGFz8/MSQrKysrKysEBA8YEkBAQEBAQEBAQEBA
        QEBAQEBAQEBAQEBAQEBAQEBAQEBAAAYGBgY2NgY2BjYGBjYGBkBAQEBAPxgYAiQjJCQbGw8OGD02QEBA
        QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEA2NjY+Ag4CPT8C
        Dhc2NkBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBA
        QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEBAQEBAQEBAQEBAQEBA
        QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBA
        QEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBA
        QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>